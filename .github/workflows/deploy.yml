name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: codecrasher2/merchstore
  AZURE_REGION: swedencentral
  CONTAINER_APP_NAME: merchstorecontainer
  RESOURCE_GROUP: MerchStoreRG

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 20
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Version
        id: version
        run: |
          VERSION=$(date +'%Y%m%d-%H%M%S')-$(echo ${{ github.sha }} | cut -c1-7)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # Retry logic för Docker login
      - name: Docker Login (with retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # Alternative Docker login method som backup
      - name: Docker Login (fallback)
        if: failure()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build med caching och retry-logik
      - name: Build and Push Docker Image
        id: build
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 2
          retry_wait_seconds: 30
          command: |
            docker buildx build \
              --platform linux/amd64 \
              --cache-from=type=registry,ref=${{ env.DOCKER_IMAGE }}:cache \
              --cache-to=type=registry,ref=${{ env.DOCKER_IMAGE }}:cache,mode=max \
              --tag ${{ env.DOCKER_IMAGE }}:latest \
              --tag ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} \
              --push \
              --file ./Dockerfile \
              .

      # Fallback till grundläggande Docker build om Buildx misslyckas
      - name: Fallback Docker Build
        if: failure()
        run: |
          echo "Buildx misslyckades, försöker med standard Docker build..."
          docker build -t ${{ env.DOCKER_IMAGE }}:latest -t ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} .
          docker push ${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}

      - name: Verify Image
        run: |
          echo "Verifierar att imagen finns..."
          docker manifest inspect ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          echo "Image storlek:"
          docker images ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }} --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Container App Status
        id: check-app
        run: |
          echo "Kontrollerar befintlig Container App..."
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "Container App finns redan"
            echo "app-exists=true" >> $GITHUB_OUTPUT
          
            # Visa nuvarande status
            az containerapp show \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --query "{name:name,status:properties.provisioningState,replicas:properties.template.scale,image:properties.template.containers[0].image}" \
              -o table
          else
            echo "Container App finns inte"
            echo "app-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Container Apps (Update)
        if: steps.check-app.outputs.app-exists == 'true'
        run: |
          echo "Uppdaterar befintlig Container App..."
          
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }} \
            --min-replicas 1 \
            --max-replicas 3 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --env-vars \
              ASPNETCORE_ENVIRONMENT=Production \
              ASPNETCORE_URLS="http://+:8080"

      - name: Deploy to Container Apps (Create)
        if: steps.check-app.outputs.app-exists == 'false'
        run: |
          echo "Skapar ny Container App..."
          
          # Först, skapa Container App Environment om det inte finns
          if ! az containerapp env show --name merchstore-env --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "Skapar Container App Environment..."
            az containerapp env create \
              --name merchstore-env \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.AZURE_REGION }}
          fi
          
          # Skapa Container App
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment merchstore-env \
            --image ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }} \
            --target-port 8080 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 3 \
            --cpu 0.5 \
            --memory 1.0Gi \
            --env-vars \
              ASPNETCORE_ENVIRONMENT=Production \
              ASPNETCORE_URLS="http://+:8080"

      - name: Configure Ingress
        run: |
          echo "Konfigurerar ingress..."
          az containerapp ingress enable \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --type external \
            --target-port 8080 \
            --allow-insecure

      - name: Wait for Deployment
        run: |
          echo "Väntar på att deployment ska bli redo..."
          
          # Vänta tills appen är provisioned
          for i in {1..12}; do
            STATUS=$(az containerapp show \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --query properties.provisioningState \
              -o tsv)
          
            echo "Status check $i/12: $STATUS"
          
            if [ "$STATUS" = "Succeeded" ]; then
              echo "Deployment lyckades!"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "Deployment misslyckades!"
              exit 1
            fi
          
            sleep 15
          done

      - name: Health Check
        id: health-check
        run: |
          echo "Kör hälsokontroll..."
          
          # Hämta app URL
          FQDN=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            -o tsv)
          
          APP_URL="https://$FQDN"
          echo "Application URL: $APP_URL"
          echo "app-url=$APP_URL" >> $GITHUB_OUTPUT
          
          # Vänta lite extra för att appen ska starta
          echo "Väntar på att applikationen ska starta..."
          sleep 30
          
          # Enkel health check
          for i in {1..6}; do
            echo "Health check attempt $i/6..."
          
            if curl -f -s --max-time 10 "$APP_URL" > /dev/null; then
              echo "Applikationen svarar!"
              echo "Deployment slutförd framgångsrikt!"
              break
            else
              echo "Applikationen svarar inte ännu..."
              if [ $i -eq 6 ]; then
                echo "Health check misslyckades efter 6 försök"
                echo "Kontrollera applikationens loggar manuellt"
              else
                sleep 20
              fi
            fi
          done

      - name: Deployment Summary
        if: always()
        run: |
          echo "## Deployment Sammanfattning" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ steps.health-check.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.AZURE_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment misslyckades, kontrollerar rollback-alternativ..."
          
          # Lista tidigare versioner
          echo "Tillgängliga image-versioner:"
          az acr repository show-tags \
            --name codecrasher2 \
            --repository merchstore \
            --orderby time_desc \
            --top 5 \
            -o table || echo "Kunde inte hämta tidigare versioner"
          
          echo "För manuell rollback, kör:"
          echo "az containerapp update --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --image ${{ env.DOCKER_IMAGE }}:<tidigare-version>"